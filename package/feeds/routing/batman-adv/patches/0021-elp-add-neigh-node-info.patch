Index: batman-adv-2016.5/net/batman-adv/bat_v_elp.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/bat_v_elp.c
+++ batman-adv-2016.5/net/batman-adv/bat_v_elp.c
@@ -273,6 +273,17 @@ static void batadv_v_elp_periodic_work(s
 	elp_packet->seqno = htonl(atomic_read(&hard_iface->bat_v.elp_seqno));
 	elp_interval = atomic_read(&hard_iface->bat_v.elp_interval);
 	elp_packet->elp_interval = htonl(elp_interval);
+	
+	{
+		struct batadv_hardif_neigh_node *hardif_neigh;
+		elp_packet->neigh_node_num = 0;
+		rcu_read_lock();
+		hlist_for_each_entry_rcu(hardif_neigh, &hard_iface->neigh_list, list) {
+			ether_addr_copy(elp_packet->neigh_node[elp_packet->neigh_node_num].addr, hardif_neigh->addr);
+			elp_packet->neigh_node_num++;
+		}
+		rcu_read_unlock();
+	}
 
 	batadv_dbg(BATADV_DBG_BATMAN, bat_priv,
 		   "Sending broadcast ELP packet on interface %s, seqno %u\n",
@@ -447,6 +458,9 @@ static void batadv_v_elp_neigh_update(st
 	orig_neigh = batadv_v_ogm_orig_get(bat_priv, elp_packet->orig);
 	if (!orig_neigh)
 		return;
+	
+	/* flag this orig node is neigh node */
+	orig_neigh->neigh_flag = 1;
 
 	neigh = batadv_neigh_node_get_or_create(orig_neigh,
 						if_incoming, neigh_addr);
@@ -470,6 +484,14 @@ static void batadv_v_elp_neigh_update(st
 	hardif_neigh->last_seen = jiffies;
 	hardif_neigh->bat_v.elp_latest_seqno = ntohl(elp_packet->seqno);
 	hardif_neigh->bat_v.elp_interval = ntohl(elp_packet->elp_interval);
+	
+	/* kw: copy the nodes info which are the enigh node of this elp node */
+	if (0 != elp_packet->neigh_node_num)
+	{
+		orig_neigh->neigh_node_num = elp_packet->neigh_node_num;
+		memcpy((void*)&orig_neigh->neigh_node[0], (void*)&elp_packet->neigh_node[0], 
+				sizeof(struct batadv_orig_neigh_node_info)*elp_packet->neigh_node_num);
+	}
 
 hardif_free:
 	if (hardif_neigh)
Index: batman-adv-2016.5/net/batman-adv/packet.h
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/packet.h
+++ batman-adv-2016.5/net/batman-adv/packet.h
@@ -22,6 +22,7 @@
 #include <linux/types.h>
 
 #define batadv_tp_is_error(n) ((u8)(n) > 127 ? 1 : 0)
+#define MAX_NODES_NUM 64 
 
 /**
  * enum batadv_packettype - types for batman-adv encapsulated packets
@@ -233,6 +234,12 @@ struct batadv_ogm2_packet {
 
 #define BATADV_OGM2_HLEN sizeof(struct batadv_ogm2_packet)
 
+struct batadv_orig_neigh_node_info {
+	u8	addr[ETH_ALEN];
+	u8	link_metric;
+};
+
+
 /**
  * struct batadv_elp_packet - elp (neighbor discovery) packet
  * @packet_type: batman-adv packet type, part of the general header
@@ -247,6 +254,8 @@ struct batadv_elp_packet {
 	u8     orig[ETH_ALEN];
 	__be32 seqno;
 	__be32 elp_interval;
+	u8     neigh_node_num;
+	struct batadv_orig_neigh_node_info neigh_node[MAX_NODES_NUM-1];
 };
 
 #define BATADV_ELP_HLEN sizeof(struct batadv_elp_packet)
Index: batman-adv-2016.5/net/batman-adv/types.h
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/types.h
+++ batman-adv-2016.5/net/batman-adv/types.h
@@ -169,6 +169,8 @@ struct batadv_hard_iface {
 #ifdef CONFIG_BATMAN_ADV_BATMAN_V
 	struct batadv_hard_iface_bat_v bat_v;
 #endif
+	u8     neigh_node_num;
+	struct batadv_orig_neigh_node_info neigh_node[MAX_NODES_NUM];
 	struct dentry *debug_dir;
 	struct hlist_head neigh_list;
 	/* neigh_list_lock protects: neigh_list */
@@ -328,6 +330,9 @@ struct batadv_orig_node {
 #endif
 	unsigned long last_seen;
 	unsigned long bcast_seqno_reset;
+	u8     neigh_flag;
+	u8     neigh_node_num;
+        struct batadv_orig_neigh_node_info neigh_node[MAX_NODES_NUM-1];
 #ifdef CONFIG_BATMAN_ADV_MCAST
 	/* synchronizes mcast tvlv specific orig changes */
 	spinlock_t mcast_handler_lock;
@@ -436,6 +441,7 @@ struct batadv_hardif_neigh_node {
 	struct hlist_node list;
 	u8 addr[ETH_ALEN];
 	u8 orig[ETH_ALEN];
+	bool forward_flag;
 	struct batadv_hard_iface *if_incoming;
 	unsigned long last_seen;
 #ifdef CONFIG_BATMAN_ADV_BATMAN_V
@@ -1103,6 +1109,11 @@ struct batadv_priv {
 	atomic_t bcast_seqno;
 	atomic_t bcast_queue_left;
 	atomic_t batman_queue_left;
+
+	/* new control position start */
+	atomic_t ogm_forward_judge;
+	/* new control postion end */
+
 	char num_ifaces;
 	struct kobject *mesh_obj;
 	struct dentry *debug_dir;
Index: batman-adv-2016.5/net/batman-adv/bat_v_ogm.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/bat_v_ogm.c
+++ batman-adv-2016.5/net/batman-adv/bat_v_ogm.c
@@ -634,6 +634,14 @@ batadv_v_ogm_process_per_outif(struct ba
 					    neigh_node, if_incoming,
 					    if_outgoing);
 
+	if ((forward) && (atomic_read(&bat_priv->ogm_forward_judge) == 1))
+	{
+		struct batadv_hardif_neigh_node * hardif_neigh;
+		hardif_neigh = batadv_hardif_neigh_get(if_incoming, neigh_node->addr);
+		if ((hardif_neigh) && (hardif_neigh->forward_flag == false))
+			forward = false;
+	}
+
 	/* if the routes have been processed correctly, check and forward */
 	if (forward)
 		batadv_v_ogm_forward(bat_priv, ogm2, orig_node, neigh_node,
Index: batman-adv-2016.5/net/batman-adv/bat_v.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/bat_v.c
+++ batman-adv-2016.5/net/batman-adv/bat_v.c
@@ -53,6 +53,80 @@
 
 struct sk_buff;
 
+static void batadv_v_neigh_orig_check(struct batadv_priv *bat_priv, struct batadv_hard_iface *hard_iface)
+{
+	int my, neighs;
+	unsigned char *my_addr;
+	unsigned char *neigh_addr;
+	struct batadv_orig_node *sender_node;
+	struct batadv_hardif_neigh_node *hardif_neigh;
+
+	hlist_for_each_entry_rcu(hardif_neigh, &hard_iface->neigh_list, list) {
+		
+		sender_node = batadv_v_ogm_orig_get(bat_priv, hardif_neigh->addr);
+		if (sender_node)
+		{
+			hardif_neigh->forward_flag = false;
+			continue;
+		}
+
+		for(my = 0; my < hard_iface->neigh_node_num; my++)
+		{
+			my_addr = hard_iface->neigh_node[my].addr;
+
+			/* my_neigh_mac is equal the sender mac, go to my next neigh node*/
+			if (ether_addr_equal(my_addr, hardif_neigh->addr))
+				continue;
+
+			for(neighs = 0; neighs < sender_node->neigh_node_num; neighs++)
+			{
+				neigh_addr = sender_node->neigh_node[neighs].addr;
+				if (ether_addr_equal(my_addr, neigh_addr))
+					break;
+			}
+
+			/* if my neigh is not include by neigh's neigh, go to next my neigh */
+			if (neighs > sender_node->neigh_node_num)
+			{
+				hardif_neigh->forward_flag = true;
+				break;
+			}
+		}
+
+		/* all of my neigh nodes are matched */
+		if (my >hard_iface->neigh_node_num)
+			hardif_neigh->forward_flag = false;
+	}
+	return;
+}
+
+void batadv_v_hardif_neigh_forward_judge(struct batadv_priv *bat_priv)
+{
+	int i;
+	struct net_device *net_dev = bat_priv->soft_iface;
+	struct batadv_hardif_neigh_node *hardif_neigh;
+	struct batadv_hard_iface *hard_iface;
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(hard_iface, &batadv_hardif_list, list) {
+		if (hard_iface->soft_iface != net_dev)
+			continue;
+
+		i = 0;
+		hlist_for_each_entry_rcu(hardif_neigh, &hard_iface->neigh_list, list) {
+			ether_addr_copy(hard_iface->neigh_node[i].addr, hardif_neigh->addr);
+			i++;
+		}
+		hard_iface->neigh_node_num = i;
+		if (i != 0)
+			batadv_v_neigh_orig_check(bat_priv, hard_iface);
+	}
+	rcu_read_unlock();
+
+	return;
+}
+
+
 static void batadv_v_iface_activate(struct batadv_hard_iface *hard_iface)
 {
 	struct batadv_priv *bat_priv = netdev_priv(hard_iface->soft_iface);
@@ -176,9 +250,10 @@ batadv_v_hardif_neigh_print(struct seq_f
 	last_msecs = jiffies_to_msecs(jiffies - hardif_neigh->last_seen) % 1000;
 	throughput = ewma_throughput_read(&hardif_neigh->bat_v.throughput);
 
-	seq_printf(seq, "%pM %4i.%03is (%9u.%1u) [%10s]\n",
+	seq_printf(seq, "%pM %4i.%03is (%9u.%1u) [%10s] forward=%s\n",
 		   hardif_neigh->addr, last_secs, last_msecs, throughput / 10,
-		   throughput % 10, hardif_neigh->if_incoming->net_dev->name);
+		   throughput % 10, hardif_neigh->if_incoming->net_dev->name, 
+		   hardif_neigh->forward_flag ? "ture":"false");
 }
 
 /**
Index: batman-adv-2016.5/net/batman-adv/bat_v.h
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/bat_v.h
+++ batman-adv-2016.5/net/batman-adv/bat_v.h
@@ -26,6 +26,7 @@ int batadv_v_init(void);
 void batadv_v_hardif_init(struct batadv_hard_iface *hardif);
 int batadv_v_mesh_init(struct batadv_priv *bat_priv);
 void batadv_v_mesh_free(struct batadv_priv *bat_priv);
+void batadv_v_hardif_neigh_forward_judge(struct batadv_priv *bat_priv);
 
 #else
 
Index: batman-adv-2016.5/net/batman-adv/originator.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/originator.c
+++ batman-adv-2016.5/net/batman-adv/originator.c
@@ -51,6 +51,9 @@
 #include "routing.h"
 #include "soft-interface.h"
 #include "translation-table.h"
+#ifdef CONFIG_BATMAN_ADV_BATMAN_V
+#include "bat_v.h"
+#endif
 
 /* hash class keys */
 static struct lock_class_key batadv_orig_hash_lock_class_key;
@@ -583,6 +586,7 @@ batadv_hardif_neigh_create(struct batadv
 	INIT_HLIST_NODE(&hardif_neigh->list);
 	ether_addr_copy(hardif_neigh->addr, neigh_addr);
 	ether_addr_copy(hardif_neigh->orig, orig_node->orig);
+	hardif_neigh->forward_flag = true;
 	hardif_neigh->if_incoming = hard_iface;
 	hardif_neigh->last_seen = jiffies;
 
@@ -1060,6 +1064,7 @@ struct batadv_orig_node *batadv_orig_nod
 	ether_addr_copy(orig_node->orig, addr);
 	batadv_dat_init_orig_node_addr(orig_node);
 	atomic_set(&orig_node->last_ttvn, 0);
+	orig_node->neigh_flag = 0;
 	orig_node->tt_buff = NULL;
 	orig_node->tt_buff_len = 0;
 	orig_node->last_seen = jiffies;
@@ -1298,12 +1303,12 @@ static bool batadv_purge_orig_node(struc
 	struct batadv_neigh_node *best_neigh_node;
 	struct batadv_hard_iface *hard_iface;
 	bool changed_ifinfo, changed_neigh;
-	
+#if 0	
 	batadv_dbg(BATADV_DBG_CUS, bat_priv,
                            "%s: Originator purge process: originator %pM, last_seen %u(%u), timeout = %d(%u)\n",
                            __func__, orig_node->orig, orig_node->last_seen, jiffies_to_msecs(orig_node->last_seen), 
 			   2*BATADV_PURGE_TIMEOUT, jiffies_to_msecs(2*BATADV_PURGE_TIMEOUT));
-
+#endif
 	if (batadv_has_timed_out(orig_node->last_seen,
 				 2 * BATADV_PURGE_TIMEOUT)) {
 		batadv_dbg(BATADV_DBG_BATMAN, bat_priv,
@@ -1312,6 +1317,12 @@ static bool batadv_purge_orig_node(struc
 			   jiffies_to_msecs(orig_node->last_seen));
 		return true;
 	}
+
+#ifdef CONFIG_BATMAN_ADV_BATMAN_V
+	if (orig_node->neigh_flag == true)
+		batadv_v_hardif_neigh_forward_judge(bat_priv);
+#endif
+
 	changed_ifinfo = batadv_purge_orig_ifinfo(bat_priv, orig_node);
 	changed_neigh = batadv_purge_orig_neighbors(bat_priv, orig_node);
 
Index: batman-adv-2016.5/net/batman-adv/soft-interface.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/soft-interface.c
+++ batman-adv-2016.5/net/batman-adv/soft-interface.c
@@ -850,6 +850,9 @@ static int batadv_softif_init_late(struc
 #endif
 	atomic_set(&bat_priv->tp_num, 0);
 
+	/* customize control position */
+	atomic_set(&bat_priv->ogm_forward_judge, 0);
+
 	bat_priv->tt.last_changeset = NULL;
 	bat_priv->tt.last_changeset_len = 0;
 	bat_priv->isolation_mark = 0;
Index: batman-adv-2016.5/net/batman-adv/sysfs.c
===================================================================
--- batman-adv-2016.5.orig/net/batman-adv/sysfs.c
+++ batman-adv-2016.5/net/batman-adv/sysfs.c
@@ -695,6 +695,7 @@ BATADV_ATTR_SIF_BOOL(network_coding, 064
 #endif
 static BATADV_ATTR(isolation_mark, 0644, batadv_show_isolation_mark,
 		   batadv_store_isolation_mark);
+BATADV_ATTR_SIF_UINT(ogm_forward_judge, ogm_forward_judge, 0644, 0, 1, NULL);
 
 static struct batadv_attribute *batadv_mesh_attrs[] = {
 	&batadv_attr_aggregated_ogms,
@@ -722,6 +723,7 @@ static struct batadv_attribute *batadv_m
 	&batadv_attr_network_coding,
 #endif
 	&batadv_attr_isolation_mark,
+	&batadv_attr_ogm_forward_judge,
 	NULL,
 };
 
