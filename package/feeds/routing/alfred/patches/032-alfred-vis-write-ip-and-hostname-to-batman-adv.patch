--- a/vis/vis.c
+++ b/vis/vis.c
@@ -186,6 +186,24 @@ static int get_if_ipv4(char *ifname, uin
 	return 0;
 }
 
+static void set_ipv4_to_batman_adv(uint8_t *ip)
+{
+	char cmd[128];
+	int len;
+	int total = 0;
+	len = strlen(ipv4_to_str(ip));
+        memcpy(cmd, "echo ", 5);
+	total += 5;
+        memcpy(&cmd[5], ipv4_to_str(ip), len);
+	total += len;
+        memcpy(&cmd[5+len], " >> /sys/kernel/debug/batman_adv/bat0/ipv4", sizeof(">> /sys/kernel/debug/batman_adv/bat0/ipv4"));
+	total += sizeof(">> /sys/kernel/debug/batman_adv/bat0/ipv4");
+	cmd[total] = '\0';
+        printf("cmd is %s\n", cmd);
+        system(cmd);
+	return;
+}
+
 #define HOST_NAME_PATH	"/proc/sys/kernel/hostname"
 static void get_hostname(unsigned char* buf, size_t maxlen)
 {
@@ -222,6 +240,12 @@ static void get_hostname(unsigned char*
 	return;
 }
 
+static void set_hostname_to_batman_adv()
+{
+	system("cat /proc/sys/kernel/hostname >> /sys/kernel/debug/batman_adv/bat0/hostname");
+	return;
+}
+
 static int get_if_index_byname(struct globals *globals, char *ifname)
 {
 	struct iface_list_entry *i_entry;
@@ -774,6 +798,7 @@ static int vis_publish_data(struct globa
 	globals->push->tx.id = htons(ntohs(globals->push->tx.id) + 1);
 
 	len = VIS_DATA_SIZE(globals->vis_data);
+	printf("%s: len=%d, vis_iface num = %d, vis_entry num = %d\n", __func__, len, globals->vis_data->iface_n, globals->vis_data->entries_n);
 	globals->push->data->header.length = htons(len);
 	len += sizeof(*globals->push) - sizeof(globals->push->header);
 	len += sizeof(*globals->push->data);
@@ -820,6 +845,11 @@ static int compile_vis_data(struct globa
 
 	get_hostname(buf, 32);
 
+//	get_hostname(name, 32);
+	set_hostname_to_batman_adv();
+	set_ipv4_to_batman_adv(ipv4);
+
+
 	list_for_each_entry(i_entry, &globals->iface_list, list) {
 		memcpy(&globals->vis_data->ifaces[iface_n].mac, i_entry->mac, ETH_ALEN);
 		memcpy(&globals->vis_data->ifaces[iface_n].name, buf, strlen(buf));
@@ -1196,6 +1226,7 @@ static int vis_read_answer(struct global
 		ifaces = vis_data->ifaces;
 		vis_entries = (struct vis_entry *) &ifaces[vis_data->iface_n];
 
+		printf("%s, iface = %d\n", __func__, vis_data->iface_n);
 		ops->interfaces(vis_data->iface_n, ifaces);
 
 		if (vis_data->entries_n == 0)
