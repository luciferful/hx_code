--- a/vis/vis.c
+++ b/vis/vis.c
@@ -876,13 +876,15 @@ static int compile_vis_data(struct globa
 	set_ipv4_to_batman_adv(ipv4);
 	get_if_noise("wlan1", &nf);
 
-
 	list_for_each_entry(i_entry, &globals->iface_list, list) {
 		memcpy(&globals->vis_data->ifaces[iface_n].mac, i_entry->mac, ETH_ALEN);
 		memcpy(&globals->vis_data->ifaces[iface_n].name, buf, strlen((char*)buf));
 		globals->vis_data->ifaces[iface_n].name[strlen((char*)buf)] = '\0';
 		memcpy(&globals->vis_data->ifaces[iface_n].ipv4, ipv4, 4);
 		globals->vis_data->ifaces[iface_n].noise = nf;
+		globals->vis_data->ifaces[iface_n].gpsbd_flag = globals->gpsbd_flag;
+		if (globals->gpsbd_flag)
+			memcpy(&globals->vis_data->ifaces[iface_n].pos_info, &globals->posinfo, sizeof(globals->posinfo));
 
 		iface_n++;
 		if (iface_n == 254)
@@ -1107,6 +1109,11 @@ static void vis_jsondoc_interfaces(uint8
 
 	printf("    { \"primary\" :\"%s\",\"%s\",\"%s\",\"%ddBm\",\n", ifaces[0].name, 
 			mac_to_str(ifaces[0].mac), ipv4_to_str(ifaces[0].ipv4), ifaces[0].noise);
+	if (ifaces[0].gpsbd_flag == 1)
+		printf("     \"gpsinfo\" :\"%s%c\", \"%s%c\", \"%s\" \n", ifaces[0].pos_info.latitude,
+				ifaces[0].pos_info.lati, ifaces[0].pos_info.longitude, ifaces[0].pos_info.longi, ifaces[0].pos_info.speed);
+	else
+		printf("     \"gpsinfo\" : NULL \n");
 	if (iface_n > 1) {
 		printf("      \"secondary\" : [ ");
 		for (i = 1; i < iface_n; i++) {
@@ -1323,6 +1330,7 @@ static struct globals *vis_init(int argc
 	globals->unix_path = ALFRED_SOCK_PATH_DEFAULT;
 	globals->port = 2002;
 	memcpy(globals->sock_inet_ipv4, "0.0.0.0", sizeof("0.0.0.0"));
+	globals->gpsbd_flag = 0;
 
 	while ((opt = getopt_long(argc, argv, "shf:i:vu:p:a:", long_options,
 				  &opt_ind)) != -1) {
@@ -1377,6 +1385,7 @@ static struct globals *vis_init(int argc
 static void vis_ser2net_recv(struct globals *globals);
 static int vis_server(struct globals *globals)
 {
+	int i;
 	debugfs_mount(NULL);
 
 	globals->push = (struct alfred_push_data_v0 *) globals->buf;
@@ -1394,8 +1403,11 @@ static int vis_server(struct globals *gl
 
 	while (1) {
 		vis_update_data(globals);
-		vis_ser2net_recv(globals);
-		sleep(UPDATE_INTERVAL);
+		for( i=0; i < UPDATE_INTERVAL; i+=3)
+		{
+			vis_ser2net_recv(globals);
+			sleep(i);
+		}
 	}
 
 	return 0;
@@ -1461,42 +1473,106 @@ static int gps_split_find(char *in, int
 static int gps_command_proc(char *buf, int len)
 {
 	int ret;
-	int i;
+//	int i;
+	int length;
 	char tmpbuf[128];
-	char gpsbuf[6][32];
+//	char gpsbuf[6][32];
+	struct globals *globals = &vis_globals;
 
 	ret = memcmp(buf, "$GNRMC", 5);
 	if (ret != 0)
 		return -1;
+
+	printf("GPS info = %s\n", buf);
 	ret = gps_split_find(buf, len, 2, tmpbuf);
 	if (ret != 0)
 	{
+		globals->gpsbd_flag = 0;
 		printf("can't find gps status, %s\n", buf);
 		return -2;
 	}
 
 	if (tmpbuf[0] == 'V')
 	{
-		printf("GPS infomation is invalid!\n");
+		globals->gpsbd_flag = 0;
+		//printf("GPS infomation is invalid!\n");
 		return 0;
 	}
 	else if (tmpbuf[0] == 'A')
 	{
-		for(i = 3; i < 8; i++)
+		globals->gpsbd_flag = 1;
+
+		ret = gps_split_find(buf, len, 3, tmpbuf);
+		if (ret == 0)
 		{
-			if (!gps_split_find(buf, len, i, tmpbuf))
-			{
-				//printf("%d: %s, len=%d\n", i, tmpbuf, strlen(tmpbuf));
-				memcpy(gpsbuf[i-3], tmpbuf, strlen(tmpbuf));
-				gpsbuf[i-3][strlen(tmpbuf)] = '\0';
-			}
+			length = strlen(tmpbuf);
+			if (length > 15)
+				length = 15;
+			memcpy(globals->posinfo.latitude, tmpbuf, length);
+			globals->posinfo.latitude[length] = '\0';
+		}
+		else
+		{
+			globals->gpsbd_flag = 0;
+			return -3;
 		}
 
-		printf("%s%s, %s%s, speed=%s\n", gpsbuf[0], gpsbuf[1], gpsbuf[2], gpsbuf[3], gpsbuf[4]);
+		ret = gps_split_find(buf, len, 5, tmpbuf);
+                if (ret == 0)
+                {
+                        length = strlen(tmpbuf);
+                        if (length > 15)
+                                length = 15;
+                        memcpy(globals->posinfo.longitude, tmpbuf, length);
+                        globals->posinfo.longitude[length] = '\0';
+                }
+                else
+                {
+                        globals->gpsbd_flag = 0;
+                        return -5;
+                }
+
+		ret = gps_split_find(buf, len, 7, tmpbuf);
+                if (ret == 0)
+                {
+                        length = strlen(tmpbuf);
+                        if (length > 15)
+                                length = 15;
+                        memcpy(globals->posinfo.speed, tmpbuf, length);
+                        globals->posinfo.speed[length] = '\0';
+                }
+                else
+                {
+                        globals->gpsbd_flag = 0;
+                        return -7;
+                }
+
+		ret = gps_split_find(buf, len, 4, tmpbuf);
+                if (ret == 0)
+                        globals->posinfo.lati = tmpbuf[0];
+                else
+                {
+                        globals->gpsbd_flag = 0;
+                        return -4;
+                }
+
+		ret = gps_split_find(buf, len, 6, tmpbuf);
+                if (ret == 0)
+                        globals->posinfo.longi = tmpbuf[0];
+                else
+                {
+                        globals->gpsbd_flag = 0;
+                        return -6;
+                }
+
+		//printf("%s%s, %s%s, speed=%s\n", gpsbuf[0], gpsbuf[1], gpsbuf[2], gpsbuf[3], gpsbuf[4]);
 		return 0;
 	}
 	else
+	{
+		globals->gpsbd_flag = 0;
 		printf("GPS information status error! %s\n", tmpbuf);
+	}
 	return -1;
 }
 
--- a/vis/vis.h
+++ b/vis/vis.h
@@ -53,11 +53,21 @@ enum vis_format {
 	FORMAT_JSONDOC,
 };
 
+struct vis_gpsbd_info {
+	char latitude[16];
+	char longitude[16];
+	char lati;
+	char longi;
+	char speed[16];
+};
+
 struct vis_iface {
 	uint8_t mac[ETH_ALEN];
 	uint8_t name[32];
 	uint8_t ipv4[4];
 	int32_t noise;
+	uint8_t gpsbd_flag;
+	struct vis_gpsbd_info pos_info;
 };
 
 struct vis_entry {
@@ -107,6 +117,8 @@ struct globals {
 	uint32_t port;
 	uint8_t sock_inet_ipv4[32];
 	int ser2net_fd;
+	uint8_t gpsbd_flag;
+	struct vis_gpsbd_info posinfo;
 
 	/* internal pointers into buf */
 	struct alfred_request_v0 *request;
