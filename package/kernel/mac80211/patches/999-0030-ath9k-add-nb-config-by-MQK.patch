--- a/drivers/net/wireless/ath/ath9k/ar9003_phy.c
+++ b/drivers/net/wireless/ath/ath9k/ar9003_phy.c
@@ -597,7 +597,10 @@ static u32 ar9003_hw_compute_pll_control
 	else if (chan && IS_CHAN_QUARTER_RATE(chan))
 		pll |= SM(0x2, AR_RTC_9300_SOC_PLL_CLKSEL);
 
-	pll |= SM(0x2c, AR_RTC_9300_SOC_PLL_DIV_INT);
+	if ((chan && IS_CHAN_QUARTER_RATE(chan)) && (ah->is_nb == true))
+		pll |= SM(0x11, AR_RTC_9300_SOC_PLL_DIV_INT);
+	else
+		pll |= SM(0x2c, AR_RTC_9300_SOC_PLL_DIV_INT);
 
 	return pll;
 }
@@ -613,8 +616,11 @@ static u32 ar9003_hw_compute_pll_control
 		pll |= SM(0x1, AR_RTC_9300_PLL_CLKSEL);
 	else if (chan && IS_CHAN_QUARTER_RATE(chan))
 		pll |= SM(0x2, AR_RTC_9300_PLL_CLKSEL);
-
-	pll |= SM(0x2c, AR_RTC_9300_PLL_DIV);
+	
+	if ((chan && IS_CHAN_QUARTER_RATE(chan)) && (ah->is_nb == true))
+	        pll |= SM(0x11, AR_RTC_9300_SOC_PLL_DIV_INT);
+        else
+		pll |= SM(0x2c, AR_RTC_9300_PLL_DIV);
 
 	return pll;
 }
@@ -1017,7 +1023,12 @@ static void ar9003_hw_set_delta_slope(st
 	if (IS_CHAN_HALF_RATE(chan))
 		clockMhzScaled = clockMhzScaled >> 1;
 	else if (IS_CHAN_QUARTER_RATE(chan))
-		clockMhzScaled = clockMhzScaled >> 2;
+	{
+		if (ah->is_nb == false)
+			clockMhzScaled = clockMhzScaled >> 2;
+		else
+			clockMhzScaled = 162067388;
+	}
 
 	/*
 	 * ALGO -> coef = 1e8/fcarrier*fclock/40;
--- a/drivers/net/wireless/ath/ath9k/hw.c
+++ b/drivers/net/wireless/ath/ath9k/hw.c
@@ -61,7 +61,12 @@ static void ath9k_hw_set_clockrate(struc
 		if (IS_CHAN_HALF_RATE(chan))
 			clockrate /= 2;
 		if (IS_CHAN_QUARTER_RATE(chan))
-			clockrate /= 4;
+		{
+			if (ah->is_nb == false)
+				clockrate /= 4;
+			else
+				clockrate = 4;
+		}
 	}
 
 	common->clockrate = clockrate;
@@ -103,7 +108,12 @@ void ath9k_hw_synth_delay(struct ath_hw
 	if (IS_CHAN_HALF_RATE(chan))
 		hw_delay *= 2;
 	else if (IS_CHAN_QUARTER_RATE(chan))
-		hw_delay *= 4;
+	{
+		if (ah->is_nb == false)
+			hw_delay *= 4;
+		else
+			hw_delay = hw_delay * 10352 / 1000;
+	}
 
 	udelay(hw_delay + BASE_ACTIVATE_DELAY);
 }
@@ -184,12 +194,24 @@ u16 ath9k_hw_computetxtime(struct ath_hw
 		break;
 	case WLAN_RC_PHY_OFDM:
 		if (ah->curchan && IS_CHAN_QUARTER_RATE(ah->curchan)) {
-			bitsPerSymbol =	(kbps * OFDM_SYMBOL_TIME_QUARTER) / 1000;
-			numBits = OFDM_PLCP_BITS + (frameLen << 3);
-			numSymbols = DIV_ROUND_UP(numBits, bitsPerSymbol);
-			txTime = OFDM_SIFS_TIME_QUARTER
-				+ OFDM_PREAMBLE_TIME_QUARTER
-				+ (numSymbols * OFDM_SYMBOL_TIME_QUARTER);
+			if (ah->is_nb == false)
+			{
+				bitsPerSymbol =	(kbps * OFDM_SYMBOL_TIME_QUARTER) / 1000;
+				numBits = OFDM_PLCP_BITS + (frameLen << 3);
+				numSymbols = DIV_ROUND_UP(numBits, bitsPerSymbol);
+				txTime = OFDM_SIFS_TIME_QUARTER
+					+ OFDM_PREAMBLE_TIME_QUARTER
+					+ (numSymbols * OFDM_SYMBOL_TIME_QUARTER);
+			}
+			else
+			{
+				bitsPerSymbol = (kbps * OFDM_SYMBOL_TIME_NB) / 1000;
+                                numBits = OFDM_PLCP_BITS + (frameLen << 3);
+                                numSymbols = DIV_ROUND_UP(numBits, bitsPerSymbol);
+                                txTime = OFDM_SIFS_TIME_NB
+                                        + OFDM_PREAMBLE_TIME_NB
+                                        + (numSymbols * OFDM_SYMBOL_TIME_NB);
+			}
 		} else if (ah->curchan &&
 			   IS_CHAN_HALF_RATE(ah->curchan)) {
 			bitsPerSymbol =	(kbps * OFDM_SYMBOL_TIME_HALF) / 1000;
@@ -1064,15 +1086,30 @@ void ath9k_hw_init_global_settings(struc
 		ack_offset = 16;
 		slottime = 13;
 	} else if (IS_CHAN_QUARTER_RATE(chan)) {
-		eifs = 340;
-		rx_lat = (rx_lat * 4) - 1;
-		tx_lat *= 4;
-		if (IS_CHAN_A_FAST_CLOCK(ah, chan))
-		    tx_lat += 22;
-
-		sifstime = 64;
-		ack_offset = 32;
-		slottime = 21;
+		if (ah->is_nb == false)
+		{
+			eifs = 340;
+			rx_lat = (rx_lat * 4) - 1;
+			tx_lat *= 4;
+			if (IS_CHAN_A_FAST_CLOCK(ah, chan))
+			    tx_lat += 22;
+
+			sifstime = 64;
+			ack_offset = 32;
+			slottime = 21;
+		}
+		else
+		{
+			eifs = 880;
+                        rx_lat = (rx_lat * 10352 / 1000) - 1;
+                        tx_lat = tx_lat * 10352 / 1000;
+                        if (IS_CHAN_A_FAST_CLOCK(ah, chan))
+                            tx_lat += 57;
+
+                        sifstime = 166;
+                        ack_offset = 83;
+                        slottime = 69;
+		}
 	} else {
 		if (AR_SREV_9287(ah) && AR_SREV_9287_13_OR_LATER(ah)) {
 			eifs = AR_D_GBL_IFS_EIFS_ASYNC_FIFO;
--- a/drivers/net/wireless/ath/ath9k/hw.h
+++ b/drivers/net/wireless/ath/ath9k/hw.h
@@ -802,6 +802,7 @@ struct ath_hw {
 	bool aspm_enabled;
 	bool is_monitoring;
 	bool need_an_top2_fixup;
+	bool is_nb;
 	u16 tx_trig_level;
 
 	u32 nf_regs[6];
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -550,6 +550,7 @@ static int ath9k_init_softc(u16 devid, s
 	ah->reg_ops.multi_read = ath9k_multi_ioread32;
 	ah->reg_ops.write = ath9k_iowrite32;
 	ah->reg_ops.rmw = ath9k_reg_rmw;
+	ah->is_nb = false;
 	pCap = &ah->caps;
 
 	common = ath9k_hw_common(ah);
--- a/drivers/net/wireless/ath/ath9k/mac.c
+++ b/drivers/net/wireless/ath/ath9k/mac.c
@@ -140,7 +140,12 @@ void ath9k_hw_abort_tx_dma(struct ath_hw
 		if (IS_CHAN_HALF_RATE(ah->curchan))
 			maxdelay *= 2;
 		else if (IS_CHAN_QUARTER_RATE(ah->curchan))
-			maxdelay *= 4;
+		{
+			if (ah->is_nb == false)			
+				maxdelay *= 4;
+			else
+				maxdelay = 10352;
+		}
 	}
 
 	REG_WRITE(ah, AR_Q_TXD, AR_Q_TXD_M);
--- a/drivers/net/wireless/ath/ath9k/mac.h
+++ b/drivers/net/wireless/ath/ath9k/mac.h
@@ -56,6 +56,11 @@
 #define OFDM_PLCP_BITS_QUARTER      22
 #define OFDM_SYMBOL_TIME_QUARTER    16
 
+#define OFDM_SIFS_TIME_NB     166 
+#define OFDM_PREAMBLE_TIME_NB  207
+#define OFDM_PLCP_BITS_NB      22
+#define OFDM_SYMBOL_TIME_NB    42
+
 #define INIT_AIFS       2
 #define INIT_CWMIN      15
 #define INIT_CWMIN_11B  31
--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -1393,6 +1393,52 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t read_file_is_nb(struct file *file, char __user *user_buf,
+                             size_t count, loff_t *ppos)
+{
+        struct ath_softc *sc = file->private_data;
+	struct ath_hw *ah = sc->sc_ah;
+        char buf[32];
+        unsigned int len;
+
+        len = sprintf(buf, "%d\n", ah->is_nb);
+        return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t write_file_is_nb(struct file *file, const char __user *user_buf,
+                             size_t count, loff_t *ppos)
+{
+        struct ath_softc *sc = file->private_data;
+	struct ath_hw *ah = sc->sc_ah;
+        unsigned long flag;
+        char buf[32];
+        ssize_t len;
+
+        len = min(count, sizeof(buf) - 1);
+        if (copy_from_user(buf, user_buf, len))
+                return -EFAULT;
+
+        buf[len] = '\0';
+        if (kstrtoul(buf, 0, &flag))
+                return -EINVAL;
+	
+	if (flag)
+		ah->is_nb = true;
+	else
+		ah->is_nb = false;
+
+        return count;
+}
+
+static const struct file_operations fops_is_nb = {
+        .read = read_file_is_nb,
+        .write = write_file_is_nb,
+        .open = simple_open,
+        .owner = THIS_MODULE,
+        .llseek = default_llseek,
+};
+
+
 #ifdef CONFIG_MAC80211_LEDS
 
 static ssize_t write_file_gpio_led(struct file *file, const char __user *ubuf,
@@ -1516,6 +1562,8 @@ int ath9k_init_debug(struct ath_hw *ah)
 			    &fops_eeprom);
 	debugfs_create_file("chanbw", S_IRUSR | S_IWUSR, sc->debug.debugfs_phy,
 			    sc, &fops_chanbw);
+	debugfs_create_file("is_nb", S_IRUSR | S_IWUSR, sc->debug.debugfs_phy,
+                            sc, &fops_is_nb);
 #ifdef CONFIG_MAC80211_LEDS
 	debugfs_create_file("gpio_led", S_IWUSR,
 			   sc->debug.debugfs_phy, sc, &fops_gpio_led);
